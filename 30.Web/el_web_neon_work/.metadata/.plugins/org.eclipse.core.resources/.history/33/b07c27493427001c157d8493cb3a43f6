<!DOCTYPE html>
<html>
<head>
<meta charset="EUC-KR">
<title>ASYNC FALSE</title>
<!-- 

Ajax 동기 방식 구현 방법
async, await 이용 : ECMAScript 2017 표준 
--------------------------------------
1. ajax로 가져올 데이터를 별도의 함수로 만듭니다.
2. 그 함수의 리턴은 ajax 자체입니다.
3. 위에서 만든 함수를 호출하는 함수에 async 키워드를 붙여서 작성합니다.
4. 3의 함수에서 ajax용 함수를 호출할 때 await 키워드를 붙여서 동작 완료를 기다리게 합니다.
5. ajax 동작이 완료된 결과를 다른 변수에 담아서 활용합니다.

jQuery 1.8 이상부터는 
ajax 호출을 동기적(async: false)으로 처리하면 에러가 난다. 
 
 
요약 : async(비동기)로 ajax를 호출하는 함수 앞에 await를 앞에 붙인다..?
 
 -->
<script  src="http://code.jquery.com/jquery-latest.min.js"></script>
<script type="text/javascript">

	$(document).ready(function(){
		
		// 버튼 클릭시 동작
		$("#button").click(function(){
			alert("버튼이 클릭되었음.");
			syncGetData();
		});
		// (비동기방식) 동기로 데이터가져오는 함수
		async function syncGetData(){
			let mydata = '';
			console.log('syncGetData() Start!');
			
			var vv = $('#id').val();
			
			// id값을 넣어 리턴받은 ajax함수 자체를 mydata에 초기화.
			mydata = await ajaxGetData(vv);
			alert("리턴받은 ajax, mydata : " + mydata);
			
			$('#ajaxResData').html("mydata를 화면에 출력 : " + mydata);
			console.log("콘솔에 mydata출력 : " + mydata);
			console.log("===종료===");
		}
		
		// aJax로 데이터 가져오는 함수
		function ajaxGetData(myval){
			
			var sendURL = "data1.jsp";
			var sendDATA = {id : myval}
			
			return $.ajax({
				url : sendURL,
				type : "GET",
				data : sendDATA
			});
			
		}
		
	});
</script>
</head>
<body>
<form id="form">
	<label>아이디</label><input name="id" id="id">
	<input id="button" type="button" value="버튼">
</form>
<div id="ajaxResData">응답받은 데이터</div>
</body>
</html>