/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.70
 * Generated at: 2021-09-26 08:35:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.kck.notice;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import a.b.c.com.kosmo.notice.vo.NoticeVO;

public final class noticeSelectAll_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("a.b.c.com.kosmo.notice.vo.NoticeVO");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>공지사항 전체 조회</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("* {\r\n");
      out.write("	margin: 0 auto;\r\n");
      out.write("	/*text-align: center;*/\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("td, th {\r\n");
      out.write("	padding: 5px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".tt {\r\n");
      out.write("	text-align: center;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("	//체크박스 체크 확인 함수	\r\n");
      out.write("	function checkOnly(chk) {\r\n");
      out.write("		// alert(\">>> : \" + chk);\r\n");
      out.write("		var chkObj = document.getElementsByName(\"bnumCheck\");\r\n");
      out.write("		console.log(\"chkObj >>> : \" + chkObj);\r\n");
      out.write("		for (var i = 0; i < chkObj.length; i++) {\r\n");
      out.write("			if (chkObj[i] != chk) {\r\n");
      out.write("				chkObj[i].checked = false;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	$(document)\r\n");
      out.write("			.ready(\r\n");
      out.write("					function() {\r\n");
      out.write("						alert(\"jQuery 진입\");\r\n");
      out.write("\r\n");
      out.write("						// I(등록 버튼) 클릭\r\n");
      out.write("						$(\"#I\").click(function() {\r\n");
      out.write("							location.href = \"/testKck/kck/notice/notice.html\";\r\n");
      out.write("						});\r\n");
      out.write("\r\n");
      out.write("						// SelectAll(전체 조회) 클릭\r\n");
      out.write("						$(\"#SALL\")\r\n");
      out.write("								.click(\r\n");
      out.write("										function() {\r\n");
      out.write("											var isudType = document.noticeSelectAllForm.ISUD_TYPE.value = \"SALL\";\r\n");
      out.write("											send(isudType);\r\n");
      out.write("										});\r\n");
      out.write("\r\n");
      out.write("						// Update : 체크 여부, 체크박스에 체크가 된 항목 : 수정\r\n");
      out.write("						$(\"#U\").click(function() {\r\n");
      out.write("\r\n");
      out.write("							// 체크박스에 체크된 수가 '0'개라면 체크박스에 체크해주세요~ 멘트를,\r\n");
      out.write("							// 체크된게 있다면 ISUD_TYPE에 'U' 값을 담아서 보내기\r\n");
      out.write("							var nCnt = chkInfo();\r\n");
      out.write("\r\n");
      out.write("							if (nCnt == 0) {\r\n");
      out.write("								console.log(\"체크박스에 체크해주세요~\");\r\n");
      out.write("								alert(\"체크박스에 체크해주세요~\");\r\n");
      out.write("\r\n");
      out.write("							} else {\r\n");
      out.write("								var v1 = $(\"#ISUD_TYPE\").val('U');\r\n");
      out.write("								send(v1);\r\n");
      out.write("							}\r\n");
      out.write("\r\n");
      out.write("						});\r\n");
      out.write("\r\n");
      out.write("						// Delete\r\n");
      out.write("						$(\"#DOK\").click(function() {\r\n");
      out.write("\r\n");
      out.write("							// 체크박스에 체크된 수가 '0'개라면 체크박스에 체크해주세요~ 멘트를,\r\n");
      out.write("							// 체크된게 있다면 ISUD_TYPE에 'DOK' 값을 담아서 보내기\r\n");
      out.write("							var nCnt = chkInfo();\r\n");
      out.write("\r\n");
      out.write("							if (nCnt == 0) {\r\n");
      out.write("								console.log(\"체크박스에 체크해주세요~\");\r\n");
      out.write("								alert(\"체크박스에 체크해주세요~\");\r\n");
      out.write("\r\n");
      out.write("							} else {\r\n");
      out.write("								var v2 = $(\"#ISUD_TYPE\").val('DOK');\r\n");
      out.write("								send(v2);\r\n");
      out.write("							}\r\n");
      out.write("						});\r\n");
      out.write("\r\n");
      out.write("						// 체크박스 체크 카운트 \r\n");
      out.write("						// return : 체크박스에 체크된 수\r\n");
      out.write("						// 체크박스의 '이름'속성을 가져와 배열에 담아 하나씩 카운트.\r\n");
      out.write("						// javascript에서 배열은 []표기하지 않는듯.\r\n");
      out.write("						function chkInfo() {\r\n");
      out.write("							var obj = document.getElementsByName(\"nnumCheck\");\r\n");
      out.write("							var nCnt = 0;\r\n");
      out.write("							for (var i = 0; i < obj.length; i++) {\r\n");
      out.write("								if (obj[i].checked == true) {\r\n");
      out.write("									nCnt++;\r\n");
      out.write("								}\r\n");
      out.write("							}\r\n");
      out.write("							return nCnt;\r\n");
      out.write("						}\r\n");
      out.write("\r\n");
      out.write("						// 전송하기\r\n");
      out.write("						function send(isudType) {\r\n");
      out.write("							$(\"#noticeSelectAllForm\")\r\n");
      out.write("									.attr(\r\n");
      out.write("											{\r\n");
      out.write("												\"action\" : \"testKck/notice?ISUD_TYPE=\"\r\n");
      out.write("														+ isudType,\r\n");
      out.write("												\"method\" : \"GET\",\r\n");
      out.write("												\"enctype\" : \"application/x-www-form-urlencoded\"\r\n");
      out.write("											}).submit();\r\n");
      out.write("						}\r\n");
      out.write("					});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");

	request.setCharacterEncoding("EUC-KR");

      out.write("\r\n");
      out.write("SELECT ALL\r\n");

	Object obj = request.getAttribute("aListAll");
	if (obj == null)
		return;

	ArrayList<NoticeVO> aList = (ArrayList<NoticeVO>) obj;

	int nCnt = aList.size();
	out.println("전체 조회 건 수 : " + nCnt + " 건");

      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("	<table>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"2\"><font size=\"4\" color=\"red\"> <img\r\n");
      out.write("					src=\"/testKck/img/ase.gif\" width=\"25\" height=\"25\" alt=\"img\">\r\n");
      out.write("					NOTICE\r\n");
      out.write("			</font></td>\r\n");
      out.write("		</tr>\r\n");
      out.write("	</table>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<form name=\"noticeSelectAllForm\" id=\"noticeSelectAllForm\">\r\n");
      out.write("		<table border=\"1\">\r\n");
      out.write("			<thead>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td class=\"tt\"><input type=\"checkbox\" name=\"chkAll\"\r\n");
      out.write("						id=\"chkAll\"></td>\r\n");
      out.write("					<td class=\"li\">순번</td>\r\n");
      out.write("					<td class=\"li\">공지사항 번호</td>\r\n");
      out.write("					<td class=\"li\">제목</td>\r\n");
      out.write("					<td class=\"li\">내용</td>\r\n");
      out.write("					<td class=\"li\">사진</td>\r\n");
      out.write("					<td class=\"li\">삭제여부</td>\r\n");
      out.write("					<td class=\"li\">등록일</td>\r\n");
      out.write("					<td class=\"li\">수정일</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</thead>\r\n");
      out.write("			");

				// for 반복문 시작 : DB에서 객체로 가지고 온 데이터를 한 줄씩 출력함
				for (int i = 0; i < nCnt; i++) {
					// DB에서 데이터 전체 조회 후 받아온 객체에서 데이터 추출하기
					NoticeVO nvo = aList.get(i);
			
      out.write("\r\n");
      out.write("			<tbody>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td class=\"tt\"><input type=\"checkbox\" id=\"nnumCheck\"\r\n");
      out.write("						name=\"nnumCheck\" value=");
      out.print(nvo.getNnum());
      out.write("\r\n");
      out.write("						onclick=\"checkOnly(this)\"></td>\r\n");
      out.write("					<td class=\"tt\">");
      out.print(i + 1);
      out.write("</td>\r\n");
      out.write("					<td class=\"tt\">");
      out.print(nvo.getNnum());
      out.write("</td>\r\n");
      out.write("					<td class=\"tt\">");
      out.print(nvo.getNsubject());
      out.write("</td>\r\n");
      out.write("					<td class=\"tt\">");
      out.print(nvo.getNmemo());
      out.write("</td>\r\n");
      out.write("					<td class=\"tt\"><img\r\n");
      out.write("						src=\"/testKck/fileupload/notice/");
      out.print(nvo.getNphoto());
      out.write(" \"\r\n");
      out.write("						border=\"1\" width=\"25\" height=\"25\" alt=\"image\"></td>\r\n");
      out.write("					<td class=\"tt\">");
      out.print(nvo.getDeleteyn());
      out.write("</td>\r\n");
      out.write("					<td class=\"tt\">");
      out.print(nvo.getInsertdate());
      out.write("</td>\r\n");
      out.write("					<td class=\"tt\">");
      out.print(nvo.getUpdatedate());
      out.write("</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				");

					} // for 반복문 종료 : DB에서 객체로 가지고 온 데이터를 한 줄씩 출력함
				
      out.write("\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td colspan=\"20\" align=\"right\"><input type=\"hidden\"\r\n");
      out.write("						name=\"ISUD_TYPE\" id=\"ISUD_TYPE\" value=\"\"> <input\r\n");
      out.write("						type=\"button\" value=\"등록\" id=\"I\"> <input type=\"button\"\r\n");
      out.write("						value=\"조회\" id=\"SALL\"> <input type=\"button\" value=\"수정\"\r\n");
      out.write("						id=\"U\"> <input type=\"button\" value=\"삭제\" id=\"DOK\">\r\n");
      out.write("			</tbody>\r\n");
      out.write("		</table>\r\n");
      out.write("	</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
