/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.70
 * Generated at: 2021-10-06 06:36:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.AjaxTest;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ajax3_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>Ajax 3</title>\r\n");
      out.write("<script  src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	$(document).ready(function(){\r\n");
      out.write("		\r\n");
      out.write("		$(\"#btn\").click(function(){\r\n");
      out.write("			\r\n");
      out.write("			alert(\"버튼이 클릭되었습니다!\");\r\n");
      out.write("			let urlReq = \"/testCss/AjaxTest/data3.jsp\";\r\n");
      out.write("			let dataReq = \"json\";\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url : urlReq,\r\n");
      out.write("				dataType : dataReq,\r\n");
      out.write("				success : toSuccess,\r\n");
      out.write("				error : toError\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			function toSuccess(data){\r\n");
      out.write("				alert(\"데이터 요청-리턴에 성공했습니다.\");\r\n");
      out.write("				alert(\"가져온 data : \" + data);\r\n");
      out.write("				console.log(\"가져온 data : \" + data);\r\n");
      out.write("				alert(\"가져오자마자 data의 타입은? >> \" + typeof(data));\r\n");
      out.write("				\r\n");
      out.write("				// JSON.stringify() javascript 객체 -> 문자열로 변경\r\n");
      out.write("				var results = JSON.stringify(data);\r\n");
      out.write("				alert(\"stringify()함수를 이용해 문자열로 바꾼 결과 값 results : \" + results);\r\n");
      out.write("				console.log(\"results : \" + results);\r\n");
      out.write("				alert(\"문자열로 변경한 data의 타입은? >> \" + typeof(results));\r\n");
      out.write("\r\n");
      out.write("				// JSON.parse() 문자열 -> javascript 객체로 변경\r\n");
      out.write("				var v = JSON.parse(results);\r\n");
      out.write("				alert(\"v : \" + v);\r\n");
      out.write("				console.log(\"v : \" + v);\r\n");
      out.write("				alert(\"문자열에서 다시 자바스크립트 객체로 변경한 data의 타입은? >> \" + typeof(v));\r\n");
      out.write("\r\n");
      out.write("				console.log(\"v : \" + v.bools);\r\n");
      out.write("				alert(\"v.bools의 타입은? : \" + typeof(v.bools));\r\n");
      out.write("				if (v.bools == \"success\"){\r\n");
      out.write("					alert(\"true\");\r\n");
      out.write("					$(\"#readJson\").html(\"화면에 리턴받은 데이터출력 : v.bools : \" + v.bools);\r\n");
      out.write("				} else {\r\n");
      out.write("					alert(\"false\");\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			function toError(data){\r\n");
      out.write("				alert(\"데이터 요청-리턴에 실패했습니다.\");\r\n");
      out.write("				console.log(\"에러가 발생했어요! : \" + data.responseText);\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<input type=\"button\" id=\"btn\" value=\"Click\">\r\n");
      out.write("	<div id=\"readJson\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
