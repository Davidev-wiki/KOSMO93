package a.b.c.ch9.kckmem;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Scanner;

import a.b.c.ch9.kck.vo.KckMemberVO;
import a.b.c.ch9.kck.vo.KckMemberVO2;
import a.b.c.ch9.kckmem.sql.KckMemberSqlMap;
import a.b.c.common.KckConnProperty2;

public class KckMember2 {

	// 전체 조회 함수
	public ArrayList<KckMemberVO2> kmemSelectAll() {
		System.out.println("KckMember2.kmemSelectAll() 함수 진입 ");

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rsRs = null;

		ArrayList<KckMemberVO2> aList = null;

		try {

			conn = KckConnProperty2.getConnection();
			pstmt = conn.prepareStatement(KckMemberSqlMap.getKckMemberSelectAllQuery());
			System.out.println("전체조회 \n" + KckMemberSqlMap.getKckMemberSelectAllQuery());

			rsRs = pstmt.executeQuery();

			if (rsRs != null) {

				aList = new ArrayList<KckMemberVO2>();

				while (rsRs.next()) {

					KckMemberVO2 kvo = new KckMemberVO2();
					kvo.setKnum(rsRs.getString(1));
					kvo.setKname(rsRs.getString(2));
					kvo.setKid(rsRs.getString(3));
					kvo.setKpw(rsRs.getString(4));
					kvo.setKbirth(rsRs.getString(5));
					kvo.setKgender(rsRs.getString(6));
					kvo.setKtel(rsRs.getString(7));
					kvo.setKhp(rsRs.getString(8));
					kvo.setKemail(rsRs.getString(9));
					kvo.setKaddr(rsRs.getString(10));
					kvo.setKhobby(rsRs.getString(11));
					kvo.setKphoto(rsRs.getString(12));
					kvo.setKskill(rsRs.getString(13));
					kvo.setKjob(rsRs.getString(14));
					kvo.setDeleteyn(rsRs.getString(15));
					kvo.setInsertdate(rsRs.getString(16));
					kvo.setUpdatedate(rsRs.getString(17));

					aList.add(kvo);
				}
			}
		} catch (Exception e) {
			System.out.println("kmemSelectAll() 함수에서 디비연결 또는 쿼리에서 문제가 생겼네요 >>> : " + e.getMessage());
		}

		return aList;
	}

	// 조건 조회 함수
	public ArrayList<KckMemberVO2> kmemSelect(KckMemberVO2 kvo) {
		System.out.println("KckMember.kmemSelect() 함수 진입 ");
		// 아랫줄은 굳이 필요없는 코드 세팅과정을 보여주기위해 일부러 만든 코드같음
		//KckMemberVO2.printlnKckMemberVO(kvo);

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rsRs = null;

		ArrayList<KckMemberVO2> aList = null;

		try {

			conn = KckConnProperty2.getConnection();
			pstmt = conn.prepareStatement(KckMemberSqlMap.getKckMemberSelectQuery());
			// System.out.println("조건조회 \n" + KckMemberSqlMap.getKckMemberSelectQuery());

			pstmt.clearParameters();
			//
			pstmt.setString(1, kvo.getKnum());
			rsRs = pstmt.executeQuery();

			if (rsRs != null) {

				aList = new ArrayList<KckMemberVO2>();

				while (rsRs.next()) {

					KckMemberVO2 _kvo = new KckMemberVO2();
					_kvo.setKnum(rsRs.getString(1));
					_kvo.setKname(rsRs.getString(2));
					_kvo.setKid(rsRs.getString(3));
					_kvo.setKpw(rsRs.getString(4));
					_kvo.setKbirth(rsRs.getString(5));
					_kvo.setKgender(rsRs.getString(6));
					_kvo.setKtel(rsRs.getString(7));
					_kvo.setKhp(rsRs.getString(8));
					_kvo.setKemail(rsRs.getString(9));
					_kvo.setKaddr(rsRs.getString(10));
					_kvo.setKhobby(rsRs.getString(11));
					_kvo.setKphoto(rsRs.getString(12));
					_kvo.setKskill(rsRs.getString(13));
					_kvo.setKjob(rsRs.getString(14));
					_kvo.setDeleteyn(rsRs.getString(15));
					_kvo.setInsertdate(rsRs.getString(16));
					_kvo.setUpdatedate(rsRs.getString(17));

					aList.add(_kvo);
				}
			}
		} catch (Exception e) {
			System.out.println("kmemSelect() 함수에서 디비연결 또는 쿼리에서 문제가 생겼네요 >>> : " + e.getMessage());
		}

		return aList;
	}

	// 회원 등록
	public boolean hmemInsert(HbeMemberVO hvo) {
		System.out.println("HbeMember hmemInsert() 함수 진입 >>> : ");
		HbeMemberVO.printlnHbeMemberVO(hvo);
		
		// 사용할 객체를 지역변수로 선언하고 초기화 하기 
		Connection conn = null;
		PreparedStatement pstmt = null;
		int nCnt = 0;
		boolean bool = false;
		
		try {			

			conn = HbeConnProperty.getConnection();
			System.out.println("conn.getAutoCommit() >>> : " + conn.getAutoCommit());
			
			pstmt = conn.prepareStatement(HbeMemberSqlMap.getHbeMemberInsertQuery());
			System.out.println("입력하기 >>> : \n"+ HbeMemberSqlMap.getHbeMemberInsertQuery());
  			
			// 파라미터 클리어 꼭 하기 
			pstmt.clearParameters();
			
			pstmt.setString(1, hvo.getHnum()); // 202108060007
			pstmt.setString(2, hvo.getHname()); // GGGG
			pstmt.setString(3, hvo.getHid());   // GG00
			pstmt.setString(4, hvo.getHpw());
			pstmt.setString(5, hvo.getHbirth());
			pstmt.setString(6, hvo.getHgender());
			pstmt.setString(7, hvo.getHtel());
			pstmt.setString(8, hvo.getHhp());			
			pstmt.setString(9, hvo.getHemail());
			pstmt.setString(10, hvo.getHaddr());
			pstmt.setString(11, hvo.getHhobby());
			pstmt.setString(12, hvo.getHphoto());
			pstmt.setString(13, hvo.getHskill());
			pstmt.setString(14, hvo.getHjob());
			/*
			sb.append("      			 HNUM 				\n"); // COLUMN 1
			sb.append("					,HNAME 				\n"); // COLUMN 2
			sb.append("					,HID 				\n"); // COLUMN 3
		    sb.append("					,HPW   				\n"); // COLUMN 4
		    sb.append("					,HBIRTH				\n"); // COLUMN 5	    
		    sb.append("					,HGENDER 			\n"); // COLUMN 6	    
		    sb.append("					,HTEL   			\n"); // COLUMN 7	    
		    sb.append("					,HHP 				\n"); // COLUMN 8	    	    
		    sb.append("					,HEMAIL				\n"); // COLUMN 9
		    sb.append("					,HADDR 				\n"); // COLUMN 10	    	    
		    sb.append("					,HHOBBY				\n"); // COLUMN 11
		    sb.append("					,HPHOTO 			\n"); // COLUMN 12
		    sb.append("					,HSKILL				\n"); // COLUMN 13
		    sb.append("					,HJOB				\n"); // COLUMN 14	    	    	  
		    sb.append("					,DELETEYN			\n"); // COLUMN 15
		    sb.append("					,INSERTDATE			\n"); // COLUMN 16
		    sb.append("					,UPDATEDATE			\n"); // COLUMN 17
			sb.append("			      )						\n");
			sb.append("	       VALUES   					\n");
			sb.append("	       		 (  					\n");
			sb.append("     				 ? 				\n"); // placeholder 1 202108060007
			sb.append("						,? 				\n"); // placeholder 2 GGGG
		    sb.append("						,?   			\n"); // placeholder 3 GG00
		    sb.append("						,?   			\n"); // placeholder 4
		    sb.append("						,? 				\n"); // placeholder 5
		    sb.append("						,? 				\n"); // placeholder 6
		    sb.append("						,?				\n"); // placeholder 7
		    sb.append("						,?				\n"); // placeholder 8
		    sb.append("						,?				\n"); // placeholder 9
		    sb.append("						,?   			\n"); // placeholder 10
		    sb.append("						,? 				\n"); // placeholder 11
		    sb.append("						,? 				\n"); // placeholder 12
		    sb.append("						,?				\n"); // placeholder 13
		    sb.append("						,?				\n"); // placeholder 14
			*/
			
			// 쿼리문 전달 시작 
			// SELECT 는 executeQuery() 함수를 사용한다. : 리턴이 ResultSet 이다 . 
			// INSERT, UPDATE, DELETE 는 executeUpdate() 함수를 사용한다. : 리턴값이 int : 건수를 리턴한다. 
			// executeQuery() 나 executeUpdate() 함수를 사용하기 싫으면 exeute() 함수를 사용하면 된다. 
			nCnt = pstmt.executeUpdate();						
			if (!conn.getAutoCommit()) conn.commit();			
			
			System.out.println("nCnt >>> : " + nCnt + " 건 등록 되었음 ");
			
			if (nCnt > 0) { bool = true;}
			
			HbeConnProperty.conClose(conn, pstmt);
		}catch(Exception e) {
			System.out.println("입력 디비연동에 문제가 생겼습니다. >>> : " + e);
		}finally {
			try {
				HbeConnProperty.conClose(conn, pstmt);				
			}catch(Exception e2) {}
		}
				
		return bool;
	}

	// 회원 수정 
	public boolean hmemUpdate(HbeMemberVO hvo) {
		System.out.println("HbeMember hmemUpdate() 함수 진입 >>> : ");
		HbeMemberVO.printlnHbeMemberVO(hvo);
		
		// 사용할 객체를 지역변수로 선언하고 초기화 하기 
		Connection conn = null;
		PreparedStatement pstmt = null;
		int nCnt = 0;
		boolean bool = false;
		
		try {			

			conn = HbeConnProperty.getConnection();
			System.out.println("conn.getAutoCommit() >>> : " + conn.getAutoCommit());
			
			pstmt = conn.prepareStatement(HbeMemberSqlMap.getHbeMemberUpdateQuery());
			System.out.println("수정하기 >>> : \n"+ HbeMemberSqlMap.getHbeMemberUpdateQuery());
  			
			// 파라미터 클리어 꼭 하기 
			pstmt.clearParameters();
			
			pstmt.setString(1, hvo.getHemail());
			pstmt.setString(2, hvo.getHaddr());
			pstmt.setString(3, hvo.getHhobby());			
			pstmt.setString(4, hvo.getHjob());
			pstmt.setString(5, hvo.getHnum()); 
			/*
			    sb.append("	SET  								\n");
				sb.append("			,HEMAIL 		= ?			\n"); // placeholder 1	    	    
				sb.append("			,HADDR			= ?			\n"); // placeholder 2	    
				sb.append("			,HHOBBY 		= ? 		\n"); // placeholder 3
				sb.append("			,HJOB   		= ?			\n"); // placeholder 4	        		
			    sb.append("		  	,UPDATEDATE 	= SYSDATE	\n");
				sb.append("	WHERE  	 HNUM 			= ?			\n"); // placeholder 5	    
				sb.append("	AND    	 DELETEYN 		= 'Y'  		\n");			
			*/
			
			// 쿼리문 전달 시작 
			// SELECT 는 executeQuery() 함수를 사용한다. : 리턴이 ResultSet 이다 . 
			// INSERT, UPDATE, DELETE 는 executeUpdate() 함수를 사용한다. : 리턴값이 int : 건수를 리턴한다. 
			// executeQuery() 나 executeUpdate() 함수를 사용하기 싫으면 exeute() 함수를 사용하면 된다. 
			nCnt = pstmt.executeUpdate();						
			if (!conn.getAutoCommit()) conn.commit();			
			
			System.out.println("nCnt >>> : " + nCnt + " 건 수정 되었음 ");
			
			if (nCnt > 0) { bool = true;}
			
			HbeConnProperty.conClose(conn, pstmt);
		}catch(Exception e) {
			System.out.println("입력 디비연동에 문제가 생겼습니다. >>> : " + e);
		}finally {
			try {
				HbeConnProperty.conClose(conn, pstmt);				
			}catch(Exception e2) {}
		}
				
		return bool;
	}
	
	// 회원 삭제
	public boolean hmemDelete(HbeMemberVO hvo) {
		System.out.println("HbeMember hmemDelete() 함수 진입 >>> : ");
		HbeMemberVO.printlnHbeMemberVO(hvo);
		
		// 사용할 객체를 지역변수로 선언하고 초기화 하기 
		Connection conn = null;
		PreparedStatement pstmt = null;
		int nCnt = 0;
		boolean bool = false;
		
		try {			

			conn = HbeConnProperty.getConnection();
			System.out.println("conn.getAutoCommit() >>> : " + conn.getAutoCommit());
			
			pstmt = conn.prepareStatement(HbeMemberSqlMap.getHbeMemberDeleteQuery());
			System.out.println("삭제하기 >>> : \n"+ HbeMemberSqlMap.getHbeMemberDeleteQuery());
  			
			// 파라미터 클리어 꼭 하기 
			pstmt.clearParameters();
			pstmt.setString(1, hvo.getHnum()); 
			/*
				sb.append("	SET  								\n");
			    sb.append("		   DELETEYN 	= 'N'			\n");	    	   
			    sb.append("		  ,UPDATEDATE 	= SYSDATE		\n");
				sb.append("	WHERE  HNUM 		= ?				\n");	 // placeholder 1    
				sb.append("	AND    DELETEYN 	= 'Y'  			\n");		
			*/
			
			// 쿼리문 전달 시작 
			// SELECT 는 executeQuery() 함수를 사용한다. : 리턴이 ResultSet 이다 . 
			// INSERT, UPDATE, DELETE 는 executeUpdate() 함수를 사용한다. : 리턴값이 int : 건수를 리턴한다. 
			// executeQuery() 나 executeUpdate() 함수를 사용하기 싫으면 exeute() 함수를 사용하면 된다. 
			nCnt = pstmt.executeUpdate();						
			if (!conn.getAutoCommit()) conn.commit();			
			
			System.out.println("nCnt >>> : " + nCnt + " 건 삭제 되었음 ");
			
			if (nCnt > 0) { bool = true;}
			
			HbeConnProperty.conClose(conn, pstmt);
		}catch(Exception e) {
			System.out.println("입력 디비연동에 문제가 생겼습니다. >>> : " + e);
		}finally {
			try {
				HbeConnProperty.conClose(conn, pstmt);				
			}catch(Exception e2) {}
		}
				
		return bool;	
		}
	
	// main() 함수
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		System.out.println("회원정보 CRUD::ISUD 테스트 >>> : ");

		Scanner sc = new Scanner(System.in);

		while (true) {

			System.out.println("\n\n회원정보 전체조회:SA, 조건조회:S, 등록:I, 수정:U, 삭제:D, 종료:Q");

			String isud = sc.next().toUpperCase();

			if ("Q".equals(isud))
				break;

			if ("SA".equals(isud)) {
				System.out.println("회원정보 전체조회 >>> : " + isud);

				KckMember2 km = new KckMember2();

				ArrayList<KckMemberVO2> aList = km.kmemSelectAll();

				if (aList != null && aList.size() > 0) {
					for (int i = 0; i < aList.size(); i++) {

						KckMemberVO2 kvo = aList.get(i);
						KckMemberVO2.printKckMemberVO(kvo);
					}
				} else {
					System.out.println("aList 에 데이터가 없네요 >>> : " + aList);
				}
			}
			if ("S".equals(isud)) {
				System.out.println("회원정보 조건조회 >>> : " + isud);

				System.out.println("조회조건 회원번호를 입력하시오 >>> : ");
				Scanner scs = new Scanner(System.in);
				String knum = scs.next();

				KckMember2 km = new KckMember2();

				KckMemberVO2 kvo = null;
				kvo = new KckMemberVO2();
				kvo.setKnum(knum);

				ArrayList<KckMemberVO2> aList = km.kmemSelect(kvo);

				if (aList != null && aList.size() > 0) {
					for (int i = 0; i < aList.size(); i++) {

						KckMemberVO2 _kvo = aList.get(i);
						KckMemberVO2.printlnKckMemberVO(_kvo);
					}
				} else {
					System.out.println("aList 에 데이터가 없네요 >>> : " + aList);
				}
			}
			if ("I".equals(isud)) {
				System.out.println("회원정보 등록 >>> : " + isud);
				System.out.println("회원정보 등록 >>> : " + isud);	
				
				String hnum = "202108060007";
				String hname = "GGGG";
				String hid = "GG00";
				String hpw = "GG1234"; 
				String hbirth = "20210701";
				String hgender = "01";
				String htel = "03212341234";
				String hhp = "01012341234"; 
				String hemail = "GG00@naver.com";
				String haddr = "서울 금천구 가산동 77"; 
				String hhobby = "01";
				String hphoto = "abc06.jpg";
				String hskill = "특기7";
				String hjob = "01";
			
				HbeMember hm = new HbeMember();
				
				HbeMemberVO hvo = null;
				hvo = new HbeMemberVO();
				hvo.setHnum(hnum);
				hvo.setHname(hname);
				hvo.setHid(hid);
				hvo.setHpw(hpw);
				hvo.setHbirth(hbirth);
				hvo.setHgender(hgender);
				hvo.setHtel(htel);
				hvo.setHhp(hhp);
				hvo.setHemail(hemail);
				hvo.setHaddr(haddr);
				hvo.setHhobby(hhobby);				
				hvo.setHphoto(hphoto);
				hvo.setHskill(hskill);
				hvo.setHjob(hjob);
				
				boolean bool = hm.hmemInsert(hvo);

				if (bool) {
					System.out.println("회원 정보 입력 성공 >>> : " + bool);	
					
					ArrayList<HbeMemberVO> aList = hm.hmemSelectAll();

					if (aList !=null && aList.size() > 0) {
						for (int i=0; i < aList.size(); i++) {
							
							HbeMemberVO _hvo = aList.get(i);
							HbeMemberVO.printHbeMemberVO(_hvo);
						}		
					}else {
						System.out.println("aList 에 데이터가 없네요 >>> : " + aList);
					}
				}else {
					System.out.println("회원 정보 입력 실패 >>> : " + bool);
				}	
				

			}
			if ("U".equals(isud)) {
				System.out.println("회원정보 수정 >>> : " + isud);
				
				String hnum = "202108060006";				
				String hemail = "FF00@naver.com";
				String haddr = "서울 금천구 가산동 6622"; 
				String hhobby = "04";				
				String hjob = "02";
			
				HbeMember hm = new HbeMember();
				
				HbeMemberVO hvo = null;
				hvo = new HbeMemberVO();
				hvo.setHnum(hnum);			
				hvo.setHemail(hemail);
				hvo.setHaddr(haddr);
				hvo.setHhobby(hhobby);								
				hvo.setHjob(hjob);
				
				boolean bool = hm.hmemUpdate(hvo);
				if (bool) {
					System.out.println("회원 정보 수정 성공 >>> : " + bool);	
					
					ArrayList<HbeMemberVO> aList = hm.hmemSelectAll();

					if (aList !=null && aList.size() > 0) {
						for (int i=0; i < aList.size(); i++) {
							
							HbeMemberVO _hvo = aList.get(i);
							HbeMemberVO.printHbeMemberVO(_hvo);
						}		
					}else {
						System.out.println("aList 에 데이터가 없네요 >>> : " + aList);
					}
				}else {
					System.out.println("회원 정보 수정 실패 >>> : " + bool);
				}	
				
			}
			if ("D".equals(isud)) {
				System.out.println("회원정보 삭제 >>> : " + isud);
				
				String hnum = "202108060006";				
			
				HbeMember hm = new HbeMember();
				
				HbeMemberVO hvo = null;
				hvo = new HbeMemberVO();
				hvo.setHnum(hnum);			
				
				boolean bool = hm.hmemDelete(hvo);
				
				if (bool) {
					System.out.println("회원 정보 삭제 성공 >>> : " + bool);	
					
					ArrayList<HbeMemberVO> aList = hm.hmemSelectAll();

					if (aList !=null && aList.size() > 0) {
						for (int i=0; i < aList.size(); i++) {
							
							HbeMemberVO _hvo = aList.get(i);
							HbeMemberVO.printHbeMemberVO(_hvo);
						}		
					}else {
						System.out.println("aList 에 데이터가 없네요 >>> : " + aList);
					}
				}else {
					System.out.println("회원 정보 삭제 실패 >>> : " + bool);
				}					
			}
		}
	}
}